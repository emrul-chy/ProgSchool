-- phpMyAdmin SQL Dump
-- version 4.7.4
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Dec 17, 2017 at 09:46 PM
-- Server version: 10.1.28-MariaDB
-- PHP Version: 7.1.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `db_progschool`
--

-- --------------------------------------------------------

--
-- Table structure for table `tbl_problem`
--

CREATE TABLE `tbl_problem` (
  `Serial` int(11) NOT NULL,
  `Title` varchar(200) NOT NULL,
  `Body` longtext NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_problem`
--

INSERT INTO `tbl_problem` (`Serial`, `Title`, `Body`) VALUES
(1, 'Print Hello World', '#include <stdio.h>\r\n\r\nint main() {\r\n    printf(\"Hello World\\n\");\r\n    return 0;\r\n}'),
(5, 'Scan and Print Integer', '#include <stdio.h>\nint main()\n{\n    int number;\n\n    // printf() dislpays the formatted output \n    printf(\"Enter an integer: \");  \n    \n    // scanf() reads the formatted input and stores them\n    scanf(\"%d\", &number);  \n    \n    // printf() displays the formatted output\n    printf(\"You entered: %d\", number);\n    return 0;\n}'),
(6, 'Add Two Integers', '#include <stdio.h>\nint main()\n{\n    int firstNumber, secondNumber, sumOfTwoNumbers;\n    \n    printf(\"Enter two integers: \");\n\n    // Two integers entered by user is stored using scanf() function\n    scanf(\"%d %d\", &firstNumber, &secondNumber);\n\n    // sum of two numbers in stored in variable sumOfTwoNumbers\n    sumOfTwoNumbers = firstNumber + secondNumber;\n\n    // Displays sum      \n    printf(\"%d + %d = %d\", firstNumber, secondNumber, sumOfTwoNumbers);\n\n    return 0;\n}'),
(7, 'Multyply Two Numbers', '#include <stdio.h>\nint main()\n{\n    double firstNumber, secondNumber, product;\n    printf(\"Enter two numbers: \");\n\n    // Stores two floating point numbers in variable firstNumber and secondNumber respectively\n    scanf(\"%lf %lf\", &firstNumber, &secondNumber);  \n \n    // Performs multiplication and stores the result in variable productOfTwoNumbers\n    product = firstNumber * secondNumber;  \n\n    // Result up to 2 decimal point is displayed using %.2lf\n    printf(\"Product = %.2lf\", product);\n    \n    return 0;\n}'),
(8, 'Print ASCII Value', '#include <stdio.h>\nint main()\n{\n    char c;\n    printf(\"Enter a character: \");\n\n    // Reads character input from the user\n    scanf(\"%c\", &c);  \n    \n    // %d displays the integer value of a character\n    // %c displays the actual character\n    printf(\"ASCII value of %c = %d\", c, c);\n    return 0;\n}'),
(9, 'Compute Quotient and Remainder', '#include <stdio.h>\nint main(){\n\n    int dividend, divisor, quotient, remainder;\n\n    printf(\"Enter dividend: \");\n    scanf(\"%d\", &dividend);\n\n    printf(\"Enter divisor: \");\n    scanf(\"%d\", &divisor);\n\n    // Computes quotient\n    quotient = dividend / divisor;\n\n    // Computes remainder\n    remainder = dividend % divisor;\n\n    printf(\"Quotient = %d\\n\", quotient);\n    printf(\"Remainder = %d\", remainder);\n\n    return 0;\n}'),
(10, 'Swap Two Numbers Using Temporary Variable', '#include <stdio.h>\nint main()\n{\n      double firstNumber, secondNumber, temporaryVariable;\n\n      printf(\"Enter first number: \");\n      scanf(\"%lf\", &firstNumber);\n\n      printf(\"Enter second number: \");\n      scanf(\"%lf\",&secondNumber);\n\n      // Value of firstNumber is assigned to temporaryVariable\n      temporaryVariable = firstNumber;\n\n      // Value of secondNumber is assigned to firstNumber\n      firstNumber = secondNumber;\n\n      // Value of temporaryVariable (which contains the initial value of firstNumber) is assigned to secondNumber\n      secondNumber = temporaryVariable;\n\n      printf(\"\\nAfter swapping, firstNumber = %.2lf\\n\", firstNumber);\n      printf(\"After swapping, secondNumber = %.2lf\", secondNumber);\n\n      return 0;\n}\n'),
(11, 'Swap Two Number Without Using Temporary Variables', '#include <stdio.h>\nint main()\n{\n    double firstNumber, secondNumber;\n\n    printf(\"Enter first number: \");\n    scanf(\"%lf\", &firstNumber);\n\n    printf(\"Enter second number: \");\n    scanf(\"%lf\",&secondNumber);\n\n    // Swapping process\n\n    firstNumber = firstNumber - secondNumber;\n    secondNumber = firstNumber + secondNumber;\n    firstNumber = secondNumber - firstNumber;\n\n    printf(\"\\nAfter swapping, firstNumber = %.2lf\\n\", firstNumber);\n    printf(\"After swapping, secondNumber = %.2lf\", secondNumber);\n\n    return 0;\n}'),
(12, 'Check Even or Odd', '#include <stdio.h>\nint main()\n{\n    int number;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &number);\n\n    // True if the number is perfectly divisible by 2\n    if(number % 2 == 0)\n        printf(\"%d is even.\", number);\n    else\n        printf(\"%d is odd.\", number);\n\n    return 0;\n}'),
(13, 'Check Whether a Character is Vowel or Consonant', '#include <stdio.h>\nint main()\n{\n    char c;\n    int isLowercaseVowel, isUppercaseVowel;\n\n    printf(\"Enter an alphabet: \");\n    scanf(\"%c\",&c);\n\n    // evaluates to 1 (true) if c is a lowercase vowel\n    isLowercaseVowel = (c == \'a\' || c == \'e\' || c == \'i\' || c == \'o\' || c == \'u\');\n\n    // evaluates to 1 (true) if c is an uppercase vowel\n    isUppercaseVowel = (c == \'A\' || c == \'E\' || c == \'I\' || c == \'O\' || c == \'U\');\n\n    // evaluates to 1 (true) if either isLowercaseVowel or isUppercaseVowel is true\n    if (isLowercaseVowel || isUppercaseVowel)\n        printf(\"%c is a vowel.\", c);\n    else\n        printf(\"%c is a consonant.\", c);\n    return 0;\n}'),
(14, 'Calculate the Sum of Natural Numbers', '#include <stdio.h>\nint main()\n{\n    int n, i, sum = 0;\n    \n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\",&n);\n\n    for(i=1; i <= n; ++i)\n    {\n        sum += i;   // sum = sum+i;\n    }\n\n    printf(\"Sum = %d\",sum);\n\n    return 0;\n}\n'),
(15, 'Find Factorial of a Number', '#include <stdio.h>\nint main()\n{\n    int n, i;\n    unsigned long long factorial = 1;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&n);\n\n    // show error if the user enters a negative integer\n    if (n < 0)\n        printf(\"Error! Factorial of a negative number doesn\'t exist.\");\n\n    else\n    {\n        for(i=1; i<=n; ++i)\n        {\n            factorial *= i;              // factorial = factorial*i;\n        }\n        printf(\"Factorial of %d = %llu\", n, factorial);\n    }\n\n    return 0;\n}'),
(16, 'Find the Largest Number Among Three Numbers', '#include <stdio.h>\nint main()\n{\n    double n1, n2, n3;\n\n    printf(\"Enter three different numbers: \");\n    scanf(\"%lf %lf %lf\", &n1, &n2, &n3);\n\n    if( n1>=n2 && n1>=n3 )\n        printf(\"%.2f is the largest number.\", n1);\n\n    if( n2>=n1 && n2>=n3 )\n        printf(\"%.2f is the largest number.\", n2);\n\n    if( n3>=n1 && n3>=n2 )\n        printf(\"%.2f is the largest number.\", n3);\n\n    return 0;\n}'),
(17, 'Check Leap Year', '#include <stdio.h>\n\nint main()\n{\n    int year;\n\n    printf(\"Enter a year: \");\n    scanf(\"%d\",&year);\n\n    if(year%4 == 0)\n    {\n        if( year%100 == 0)\n        {\n            // year is divisible by 400, hence the year is a leap year\n            if ( year%400 == 0)\n                printf(\"%d is a leap year.\", year);\n            else\n                printf(\"%d is not a leap year.\", year);\n        }\n        else\n            printf(\"%d is a leap year.\", year );\n    }\n    else\n        printf(\"%d is not a leap year.\", year);\n    \n    return 0;\n}'),
(18, 'Check Whether a Number is Positive or Negative', '#include <stdio.h>\nint main()\n{\n    double number;\n\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &number);\n\n    if (number <= 0.0)\n    {\n        if (number == 0.0)\n            printf(\"You entered 0.\");\n        else\n            printf(\"You entered a negative number.\");\n    }\n    else\n        printf(\"You entered a positive number.\");\n    return 0;\n}'),
(19, 'Check Whether a Character is an Alphabet or not', '#include <stdio.h>\nint main()\n{\n    char c;\n    printf(\"Enter a character: \");\n    scanf(\"%c\",&c);\n\n    if( (c>=\'a\' && c<=\'z\') || (c>=\'A\' && c<=\'Z\'))\n        printf(\"%c is an alphabet.\",c);\n    else\n        printf(\"%c is not an alphabet.\",c);\n\n    return 0;\n}'),
(20, 'Generate Multiplication Table', '#include <stdio.h>\nint main()\n{\n    int n, i;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&n);\n\n    for(i=1; i<=10; ++i)\n    {\n        printf(\"%d * %d = %d \\n\", n, i, n*i);\n    }\n    \n    return 0;\n}'),
(21, 'Display Fibonacci Sequence', '#include <stdio.h>\nint main()\n{\n    int i, n, t1 = 0, t2 = 1, nextTerm;\n\n    printf(\"Enter the number of terms: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Fibonacci Series: \");\n\n    for (i = 1; i <= n; ++i)\n    {\n        printf(\"%d, \", t1);\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n    return 0;\n}'),
(22, 'Find GCD of two Numbers', '#include <stdio.h>\nint main()\n{\n    int n1, n2, i, gcd;\n\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &n1, &n2);\n\n    for(i=1; i <= n1 && i <= n2; ++i)\n    {\n        // Checks if i is factor of both integers\n        if(n1%i==0 && n2%i==0)\n            gcd = i;\n    }\n\n    printf(\"G.C.D of %d and %d is %d\", n1, n2, gcd);\n\n    return 0;\n}'),
(23, 'Find LCM of two Numbers', '#include <stdio.h>\nint main()\n{\n    int n1, n2, minMultiple;\n    printf(\"Enter two positive integers: \");\n    scanf(\"%d %d\", &n1, &n2);\n\n    // maximum number between n1 and n2 is stored in minMultiple\n    minMultiple = (n1>n2) ? n1 : n2;\n\n    // Always true\n    while(1)\n    {\n        if( minMultiple%n1==0 && minMultiple%n2==0 )\n        {\n            printf(\"The LCM of %d and %d is %d.\", n1, n2,minMultiple);\n            break;\n        }\n        ++minMultiple;\n    }\n    return 0;\n}'),
(24, 'Display Characters from A to Z Using Loop', '#include <stdio.h>\nint main()\n{\n    char c;\n\n    for(c = \'A\'; c <= \'Z\'; ++c)\n       printf(\"%c \", c);\n    \n    return 0;\n}'),
(25, 'Count Number of Digits in an Integer', '#include <stdio.h>\nint main()\n{\n    long long n;\n    int count = 0;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%lld\", &n);\n\n    while(n != 0)\n    {\n        // n = n/10\n        n /= 10;\n        ++count;\n    }\n\n    printf(\"Number of digits: %d\", count);\n}'),
(26, 'Reverse a Number', '#include <stdio.h>\nint main()\n{\n    int n, reversedNumber = 0, remainder;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &n);\n\n    while(n != 0)\n    {\n        remainder = n%10;\n        reversedNumber = reversedNumber*10 + remainder;\n        n /= 10;\n    }\n\n    printf(\"Reversed Number = %d\", reversedNumber);\n\n    return 0;\n}'),
(27, 'Calculate the Power of a Number', '#include <stdio.h>\nint main()\n{\n    int base, exponent;\n\n    long long result = 1;\n\n    printf(\"Enter a base number: \");\n    scanf(\"%d\", &base);\n\n    printf(\"Enter an exponent: \");\n    scanf(\"%d\", &exponent);\n\n    while (exponent != 0)\n    {\n        result *= base;\n        --exponent;\n    }\n\n    printf(\"Answer = %lld\", result);\n\n    return 0;\n}'),
(28, 'Check Whether a Number is Palindrome or Not', '#include <stdio.h>\nint main()\n{\n    int n, reversedInteger = 0, remainder, originalInteger;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &n);\n\n    originalInteger = n;\n\n    // reversed integer is stored in variable \n    while( n!=0 )\n    {\n        remainder = n%10;\n        reversedInteger = reversedInteger*10 + remainder;\n        n /= 10;\n    }\n\n    // palindrome if orignalInteger and reversedInteger are equal\n    if (originalInteger == reversedInteger)\n        printf(\"%d is a palindrome.\", originalInteger);\n    else\n        printf(\"%d is not a palindrome.\", originalInteger);\n    \n    return 0;\n}'),
(29, 'Check Whether a Number is Prime or Not', '#include <stdio.h>\nint main()\n{\n    int n, i, flag = 0;\n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\",&n);\n\n    for(i=2; i<=n/2; ++i)\n    {\n        // condition for nonprime number\n        if(n%i==0)\n        {\n            flag=1;\n            break;\n        }\n    }\n\n    if (flag==0)\n        printf(\"%d is a prime number.\",n);\n    else\n        printf(\"%d is not a prime number.\",n);\n    \n    return 0;\n}'),
(30, 'Display Prime Numbers Between Two Intervals', '#include <stdio.h>\nint main()\n{\n    int low, high, i, flag;\n    printf(\"Enter two numbers(intervals): \");\n    scanf(\"%d %d\", &low, &high);\n\n    printf(\"Prime numbers between %d and %d are: \", low, high);\n\n    while (low < high)\n    {\n        flag = 0;\n\n        for(i = 2; i <= low/2; ++i)\n        {\n            if(low % i == 0)\n            {\n                flag = 1;\n                break;\n            }\n        }\n\n        if (flag == 0)\n            printf(\"%d \", low);\n\n        ++low;\n    }\n\n    return 0;\n}'),
(31, 'Check Armstrong Number ', 'A positive integer is called an Armstrong number of order n if\n\nabcd... = an + bn + cn + dn + ...\nIn case of an Armstrong number of 3 digits, the sum of cubes of each digits is equal to the number itself. For example:\n\n153 = 1*1*1 + 5*5*5 + 3*3*3  // 153 is an Armstrong number.\n\n\n#include <stdio.h>\nint main()\n{\n    int number, originalNumber, remainder, result = 0;\n\n    printf(\"Enter a three digit integer: \");\n    scanf(\"%d\", &number);\n\n    originalNumber = number;\n\n    while (originalNumber != 0)\n    {\n        remainder = originalNumber%10;\n        result += remainder*remainder*remainder;\n        originalNumber /= 10;\n    }\n\n    if(result == number)\n        printf(\"%d is an Armstrong number.\",number);\n    else\n        printf(\"%d is not an Armstrong number.\",number);\n\n    return 0;\n}'),
(32, 'Display Factors of a Number', '#include <stdio.h>\nint main()\n{\n    int number, i;\n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\",&number);\n\n    printf(\"Factors of %d are: \", number);\n    for(i=1; i <= number; ++i)\n    {\n        if (number%i == 0)\n        {\n            printf(\"%d \",i);\n        }\n    }\n\n    return 0;\n}'),
(33, 'Print half pyramid using *', '#include <stdio.h>\nint main()\n{\n    int i, j, rows;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=1; i<=rows; ++i)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}'),
(34, 'Print half pyramid a using numbers', '#include <stdio.h>\nint main()\n{\n    int i, j, rows;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=1; i<=rows; ++i)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            printf(\"%d \",j);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}'),
(35, 'Print half pyramid using alphabets', '#include <stdio.h>\nint main()\n{\n    int i, j;\n    char input, alphabet = \'A\';\n\n    printf(\"Enter the uppercase character you want to print in last row: \");\n    scanf(\"%c\",&input);\n\n    for(i=1; i <= (input-\'A\'+1); ++i)\n    {\n        for(j=1;j<=i;++j)\n        {\n            printf(\"%c\", alphabet);\n        }\n        ++alphabet;\n\n        printf(\"\\n\");\n    }\n    return 0;\n}'),
(36, 'Inverted half pyramid using *', '#include <stdio.h>\nint main()\n{\n    int i, j, rows;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=rows; i>=1; --i)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n}'),
(37, 'Inverted half pyramid using numbers', '#include <stdio.h>\nint main()\n{\n    int i, j, rows;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=rows; i>=1; --i)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            printf(\"%d \",j);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}'),
(38, 'Print full pyramid using *', '#include <stdio.h>\nint main()\n{\n    int i, space, rows, k=0;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=1; i<=rows; ++i, k=0)\n    {\n        for(space=1; space<=rows-i; ++space)\n        {\n            printf(\"  \");\n        }\n\n        while(k != 2*i-1)\n        {\n            printf(\"* \");\n            ++k;\n        }\n\n        printf(\"\\n\");\n    }\n    \n    return 0;\n}'),
(39, 'Print pyramid using numbers', '#include <stdio.h>\nint main()\n{\n    int i, space, rows, k=0, count = 0, count1 = 0;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=1; i<=rows; ++i)\n    {\n        for(space=1; space <= rows-i; ++space)\n        {\n            printf(\"  \");\n            ++count;\n        }\n\n        while(k != 2*i-1)\n        {\n            if (count <= rows-1)\n            {\n                printf(\"%d \", i+k);\n                ++count;\n            }\n            else\n            {\n                ++count1;\n                printf(\"%d \", (i+k-2*count1));\n            }\n            ++k;\n        }\n        count1 = count = k = 0;\n\n        printf(\"\\n\");\n    }\n    return 0;\n}'),
(40, 'Inverted full pyramid using *', '#include<stdio.h>\nint main()\n{\n    int rows, i, j, space;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=rows; i>=1; --i)\n    {\n        for(space=0; space < rows-i; ++space)\n            printf(\"  \");\n\n        for(j=i; j <= 2*i-1; ++j)\n            printf(\"* \");\n\n        for(j=0; j < i-1; ++j)\n            printf(\"* \");\n\n        printf(\"\\n\");\n    }\n\n    return 0;\n}'),
(41, 'Print Pascal\'s triangle', '#include <stdio.h>\nint main()\n{\n    int rows, coef = 1, space, i, j;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=0; i<rows; i++)\n    {\n        for(space=1; space <= rows-i; space++)\n            printf(\"  \");\n\n        for(j=0; j <= i; j++)\n        {\n            if (j==0 || i==0)\n                coef = 1;\n            else\n                coef = coef*(i-j+1)/j;\n\n            printf(\"%4d\", coef);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}'),
(42, 'Print Floyd\'s Triangle.', '#include <stdio.h>\nint main()\n{\n    int rows, i, j, number= 1;\n\n    printf(\"Enter number of rows: \");\n    scanf(\"%d\",&rows);\n\n    for(i=1; i <= rows; i++)\n    {\n        for(j=1; j <= i; ++j)\n        {\n            printf(\"%d \", number);\n            ++number;\n        }\n\n        printf(\"\\n\");\n    }\n\n    return 0;\n}'),
(43, 'Simple Calculator using switch Statement', '\n// Performs addition, subtraction, multiplication or division depending the input from user\n\n# include <stdio.h>\n\nint main() {\n\n    char operator;\n    double firstNumber,secondNumber;\n\n    printf(\"Enter an operator (+, -, *,): \");\n    scanf(\"%c\", &operator);\n\n    printf(\"Enter two operands: \");\n    scanf(\"%lf %lf\",&firstNumber, &secondNumber);\n\n    switch(operator)\n    {\n        case \'+\':\n            printf(\"%.1lf + %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber + secondNumber);\n            break;\n\n        case \'-\':\n            printf(\"%.1lf - %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber - secondNumber);\n            break;\n\n        case \'*\':\n            printf(\"%.1lf * %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber * secondNumber);\n            break;\n\n        case \'/\':\n            printf(\"%.1lf / %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber / secondNumber);\n            break;\n\n        // operator doesn\'t match any case constant (+, -, *, /)\n        default:\n            printf(\"Error! operator is not correct\");\n    }\n    \n    return 0;\n}'),
(44, 'Display Prime Numbers Between Intervals Using Function', '#include <stdio.h>\n\nint checkPrimeNumber(int n);\nint main()\n{\n    int n1, n2, i, flag;\n\n    printf(\"Enter two positive integers: \");\n    scanf(\"%d %d\", &n1, &n2);\n    printf(\"Prime numbers between %d and %d are: \", n1, n2);\n\n    for(i=n1+1; i<n2; ++i)\n    {\n        // i is a prime number, flag will be equal to 1\n        flag = checkPrimeNumber(i);\n\n        if(flag == 1)\n            printf(\"%d \",i);\n    }\n    return 0;\n}\n\n// user-defined function to check prime number\nint checkPrimeNumber(int n)\n{\n    int j, flag = 1;\n\n    for(j=2; j <= n/2; ++j)\n    {\n        if (n%j == 0)\n        {\n            flag =0;\n            break;\n        }\n    }\n    return flag;\n}'),
(45, 'Check Whether a Number can be Expressed as Sum of Two Prime Numbers', '#include <stdio.h>\nint checkPrime(int n);\nint main()\n{\n    int n, i, flag = 0;\n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    for(i = 2; i <= n/2; ++i)\n    {\n        // condition for i to be a prime number\n        if (checkPrime(i) == 1)\n        {\n            // condition for n-i to be a prime number\n            if (checkPrime(n-i) == 1)\n            {\n                // n = primeNumber1 + primeNumber2\n                printf(\"%d = %d + %d\\n\", n, i, n - i);\n                flag = 1;\n            }\n\n        }\n    }\n\n    if (flag == 0)\n        printf(\"%d cannot be expressed as the sum of two prime numbers.\", n);\n\n    return 0;\n}\n\n// Function to check prime number\nint checkPrime(int n)\n{\n    int i, isPrime = 1;\n\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            isPrime = 0;\n            break;\n        }  \n    }\n\n    return isPrime;\n}'),
(46, 'Find the Sum of Natural Numbers using Recursion', '#include <stdio.h>\nint addNumbers(int n);\n\nint main()\n{\n    int num;\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Sum = %d\",addNumbers(num));\n    return 0;\n}\n\nint addNumbers(int n)\n{\n    if(n != 0)\n        return n + addNumbers(n-1);\n    else\n        return n;\n}'),
(47, 'Find Factorial of a Number Using Recursion', '#include <stdio.h>\nlong int multiplyNumbers(int n);\n\nint main()\n{\n    int n;\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n    printf(\"Factorial of %d = %ld\", n, multiplyNumbers(n));\n    return 0;\n}\nlong int multiplyNumbers(int n)\n{\n    if (n >= 1)\n        return n*multiplyNumbers(n-1);\n    else\n        return 1;\n}'),
(48, 'Find G.C.D Using Recursion', '#include <stdio.h>\nint hcf(int n1, int n2);\nint main()\n{\n   int n1, n2;\n   printf(\"Enter two positive integers: \");\n   scanf(\"%d %d\", &n1, &n2);\n\n   printf(\"G.C.D of %d and %d is %d.\", n1, n2, hcf(n1,n2));\n   return 0;\n}\n\nint hcf(int n1, int n2)\n{\n    if (n2 != 0)\n       return hcf(n2, n1%n2);\n    else \n       return n1;\n}'),
(49, 'Convert binary number to decimal', '#include <stdio.h>\n#include <math.h>\nint convertBinaryToDecimal(long long n);\n\nint main()\n{\n    long long n;\n    printf(\"Enter a binary number: \");\n    scanf(\"%lld\", &n);\n    printf(\"%lld in binary = %d in decimal\", n, convertBinaryToDecimal(n));\n    return 0;\n}\n\nint convertBinaryToDecimal(long long n)\n{\n    int decimalNumber = 0, i = 0, remainder;\n    while (n!=0)\n    {\n        remainder = n%10;\n        n /= 10;\n        decimalNumber += remainder*pow(2,i);\n        ++i;\n    }\n    return decimalNumber;\n}'),
(50, 'Convert decimal number to binary', '#include <stdio.h>\n#include <math.h>\nlong long convertDecimalToBinary(int n);\n\nint main()\n{\n    int n;\n    printf(\"Enter a decimal number: \");\n    scanf(\"%d\", &n);\n    printf(\"%d in decimal = %lld in binary\", n, convertDecimalToBinary(n));\n    return 0;\n}\n\nlong long convertDecimalToBinary(int n)\n{\n    long long binaryNumber = 0;\n    int remainder, i = 1, step = 1;\n\n    while (n!=0)\n    {\n        remainder = n%2;\n        printf(\"Step %d: %d/2, Remainder = %d, Quotient = %d\\n\", step++, n, remainder, n/2);\n        n /= 2;\n        binaryNumber += remainder*i;\n        i *= 10;\n    }\n    return binaryNumber;\n}'),
(51, 'Convert Decimal to Octal', '#include <stdio.h>\n#include <math.h>\n\nint convertDecimalToOctal(int decimalNumber);\nint main()\n{\n    int decimalNumber;\n\n    printf(\"Enter a decimal number: \");\n    scanf(\"%d\", &decimalNumber);\n\n    printf(\"%d in decimal = %d in octal\", decimalNumber, convertDecimalToOctal(decimalNumber));\n\n    return 0;\n}\n\nint convertDecimalToOctal(int decimalNumber)\n{\n    int octalNumber = 0, i = 1;\n\n    while (decimalNumber != 0)\n    {\n        octalNumber += (decimalNumber % 8) * i;\n        decimalNumber /= 8;\n        i *= 10;\n    }\n\n    return octalNumber;\n}'),
(52, 'Convert Octal to Decimal', '#include <stdio.h>\n#include <math.h>\n\nlong long convertOctalToDecimal(int octalNumber);\nint main()\n{\n    int octalNumber;\n\n    printf(\"Enter an octal number: \");\n    scanf(\"%d\", &octalNumber);\n\n    printf(\"%d in octal = %lld in decimal\", octalNumber, convertOctalToDecimal(octalNumber));\n\n    return 0;\n}\n\nlong long convertOctalToDecimal(int octalNumber)\n{\n    int decimalNumber = 0, i = 0;\n\n    while(octalNumber != 0)\n    {\n        decimalNumber += (octalNumber%10) * pow(8,i);\n        ++i;\n        octalNumber/=10;\n    }\n\n    i = 1;\n\n    return decimalNumber;\n}\n'),
(53, 'Convert Binary to Octal', '#include <stdio.h>\n#include <math.h>\n\nint convertBinarytoOctal(long long binaryNumber);\nint main()\n{\n    long long binaryNumber;\n\n    printf(\"Enter a binary number: \");\n    scanf(\"%lld\", &binaryNumber);\n\n    printf(\"%lld in binary = %d in octal\", binaryNumber, convertBinarytoOctal(binaryNumber));\n\n    return 0;\n}\n\nint convertBinarytoOctal(long long binaryNumber)\n{\n    int octalNumber = 0, decimalNumber = 0, i = 0;\n\n    while(binaryNumber != 0)\n    {\n        decimalNumber += (binaryNumber%10) * pow(2,i);\n        ++i;\n        binaryNumber/=10;\n    }\n\n    i = 1;\n\n    while (decimalNumber != 0)\n    {\n        octalNumber += (decimalNumber % 8) * i;\n        decimalNumber /= 8;\n        i *= 10;\n    }\n\n    return octalNumber;\n}\n'),
(54, 'Convert Octal to Binary', '#include <stdio.h>\n#include <math.h>\n\nlong long convertOctalToBinary(int octalNumber);\nint main()\n{\n    int octalNumber;\n\n    printf(\"Enter an octal number: \");\n    scanf(\"%d\", &octalNumber);\n\n    printf(\"%d in octal = %lld in binary\", octalNumber, convertOctalToBinary(octalNumber));\n\n    return 0;\n}\n\nlong long convertOctalToBinary(int octalNumber)\n{\n    int decimalNumber = 0, i = 0;\n    long long binaryNumber = 0;\n\n    while(octalNumber != 0)\n    {\n        decimalNumber += (octalNumber%10) * pow(8,i);\n        ++i;\n        octalNumber/=10;\n    }\n\n    i = 1;\n\n    while (decimalNumber != 0)\n    {\n        binaryNumber += (decimalNumber % 2) * i;\n        decimalNumber /= 2;\n        i *= 10;\n    }\n\n    return binaryNumber;\n}'),
(55, 'Reverse a Sentence Using Recursion', '/* Example to reverse a sentence entered by user without using strings. */\n\n#include <stdio.h>\nvoid reverseSentence();\n\nint main()\n{\n    printf(\"Enter a sentence: \");\n    reverseSentence();\n\n    return 0;\n}\n\nvoid reverseSentence()\n{\n    char c;\n    scanf(\"%c\", &c);\n\n    if( c != \'\\n\')\n    {\n        reverseSentence();\n        printf(\"%c\",c);\n    }\n}'),
(56, 'Calculate the power using recursion', '#include <stdio.h>\r\n\r\nint power(int n1, int n2);\r\n\r\nint main()\r\n{\r\n    int base, powerRaised, result;\r\n\r\n    printf(\"Enter base number: \");\r\n    scanf(\"%d\",&base);\r\n\r\n    printf(\"Enter power number(positive integer): \");\r\n    scanf(\"%d\",&powerRaised);\r\n\r\n    result = power(base, powerRaised);\r\n\r\n    printf(\"%d^%d = %d\", base, powerRaised, result);\r\n    return 0;\r\n}\r\n\r\nint power(int base, int powerRaised)\r\n{\r\n    if (powerRaised != 0)\r\n        return (base*power(base, powerRaised-1));\r\n    else\r\n        return 1;\r\n}'),
(57, 'Calculate Average Using Arrays', '#include <stdio.h>\n\nint main()\n{\n    int n, i;\n    float num[100], sum = 0.0, average;\n\n    printf(\"Enter the numbers of elements: \");\n    scanf(\"%d\", &n);\n\n    while (n > 100 || n <= 0)\n    {\n        printf(\"Error! number should in range of (1 to 100).\\n\");\n        printf(\"Enter the number again: \");\n        scanf(\"%d\", &n);\n    }\n\n    for(i = 0; i < n; ++i)\n    {\n        printf(\"%d. Enter number: \", i+1);\n        scanf(\"%f\", &num[i]);\n        sum += num[i];\n    }\n\n    average = sum / n;\n    printf(\"Average = %.2f\", average);\n\n    return 0;\n}'),
(58, 'Find Largest Element of an Array', '#include <stdio.h>\n\nint main()\n{\n    int i, n;\n    float arr[100];\n\n    printf(\"Enter total number of elements(1 to 100): \");\n    scanf(\"%d\", &n);\n    printf(\"\\n\");\n\n    // Stores number entered by the user\n    for(i = 0; i < n; ++i)\n    {\n       printf(\"Enter Number %d: \", i+1);\n       scanf(\"%f\", &arr[i]);\n    }\n\n    // Loop to store largest number to arr[0]\n    for(i = 1; i < n; ++i)\n    {\n       // Change < to > if you want to find the smallest element\n       if(arr[0] < arr[i])\n           arr[0] = arr[i];\n    }\n    printf(\"Largest element = %.2f\", arr[0]);\n\n    return 0;\n}'),
(59, 'Calculate Standard Deviation', '#include <stdio.h>\n#include <math.h>\n\nfloat calculateSD(float data[]);\n\nint main()\n{\n    int i;\n    float data[10];\n\n    printf(\"Enter 10 elements: \");\n    for(i=0; i < 10; ++i)\n        scanf(\"%f\", &data[i]);\n\n    printf(\"\\nStandard Deviation = %.6f\", calculateSD(data));\n\n    return 0;\n}\n\nfloat calculateSD(float data[])\n{\n    float sum = 0.0, mean, standardDeviation = 0.0;\n\n    int i;\n\n    for(i=0; i<10; ++i)\n    {\n        sum += data[i];\n    }\n\n    mean = sum/10;\n\n    for(i=0; i<10; ++i)\n        standardDeviation += pow(data[i] - mean, 2);\n\n    return sqrt(standardDeviation/10);\n}'),
(60, 'Add Two Matrix Using Multi-dimensional Arrays', '#include <stdio.h>\nint main(){\n    int r, c, a[100][100], b[100][100], sum[100][100], i, j;\n\n    printf(\"Enter number of rows (between 1 and 100): \");\n    scanf(\"%d\", &r);\n    printf(\"Enter number of columns (between 1 and 100): \");\n    scanf(\"%d\", &c);\n\n    printf(\"\\nEnter elements of 1st matrix:\\n\");\n\n    for(i=0; i<r; ++i)\n        for(j=0; j<c; ++j)\n        {\n            printf(\"Enter element a%d%d: \",i+1,j+1);\n            scanf(\"%d\",&a[i][j]);\n        }\n\n    printf(\"Enter elements of 2nd matrix:\\n\");\n    for(i=0; i<r; ++i)\n        for(j=0; j<c; ++j)\n        {\n            printf(\"Enter element a%d%d: \",i+1, j+1);\n            scanf(\"%d\", &b[i][j]);\n        }\n\n    // Adding Two matrices\n\n    for(i=0;i<r;++i)\n        for(j=0;j<c;++j)\n        {\n            sum[i][j]=a[i][j]+b[i][j];\n        }\n\n    // Displaying the result\n    printf(\"\\nSum of two matrix is: \\n\\n\");\n\n    for(i=0;i<r;++i)\n        for(j=0;j<c;++j)\n        {\n\n            printf(\"%d   \",sum[i][j]);\n\n            if(j==c-1)\n            {\n                printf(\"\\n\\n\");\n            }\n        }\n    \n    return 0;\n}'),
(61, 'Multiply to Matrix Using Multi-dimensional Arrays', '#include <stdio.h>\n\nint main()\n{\n    int a[10][10], b[10][10], result[10][10], r1, c1, r2, c2, i, j, k;\n\n    printf(\"Enter rows and column for first matrix: \");\n    scanf(\"%d %d\", &r1, &c1);\n\n    printf(\"Enter rows and column for second matrix: \");\n    scanf(\"%d %d\",&r2, &c2);\n\n    // Column of first matrix should be equal to column of second matrix and\n    while (c1 != r2)\n    {\n        printf(\"Error! column of first matrix not equal to row of second.\\n\\n\");\n        printf(\"Enter rows and column for first matrix: \");\n        scanf(\"%d %d\", &r1, &c1);\n        printf(\"Enter rows and column for second matrix: \");\n        scanf(\"%d %d\",&r2, &c2);\n    }\n\n    // Storing elements of first matrix.\n    printf(\"\\nEnter elements of matrix 1:\\n\");\n    for(i=0; i<r1; ++i)\n        for(j=0; j<c1; ++j)\n        {\n            printf(\"Enter elements a%d%d: \",i+1, j+1);\n            scanf(\"%d\", &a[i][j]);\n        }\n\n    // Storing elements of second matrix.\n    printf(\"\\nEnter elements of matrix 2:\\n\");\n    for(i=0; i<r2; ++i)\n        for(j=0; j<c2; ++j)\n        {\n            printf(\"Enter elements b%d%d: \",i+1, j+1);\n            scanf(\"%d\",&b[i][j]);\n        }\n\n    // Initializing all elements of result matrix to 0\n    for(i=0; i<r1; ++i)\n        for(j=0; j<c2; ++j)\n        {\n            result[i][j] = 0;\n        }\n\n    // Multiplying matrices a and b and\n    // storing result in result matrix\n    for(i=0; i<r1; ++i)\n        for(j=0; j<c2; ++j)\n            for(k=0; k<c1; ++k)\n            {\n                result[i][j]+=a[i][k]*b[k][j];\n            }\n\n    // Displaying the result\n    printf(\"\\nOutput Matrix:\\n\");\n    for(i=0; i<r1; ++i)\n        for(j=0; j<c2; ++j)\n        {\n            printf(\"%d  \", result[i][j]);\n            if(j == c2-1)\n                printf(\"\\n\\n\");\n        }\n    return 0;\n}');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_request_problem`
--

CREATE TABLE `tbl_request_problem` (
  `Serial` int(11) NOT NULL,
  `Title` longtext NOT NULL,
  `Author` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_request_problem`
--

INSERT INTO `tbl_request_problem` (`Serial`, `Title`, `Author`) VALUES
(2, 'Substring Matching by Hashing', 'rafat');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_request_tutorial`
--

CREATE TABLE `tbl_request_tutorial` (
  `Serial` int(11) NOT NULL,
  `Title` longtext NOT NULL,
  `Author` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_request_tutorial`
--

INSERT INTO `tbl_request_tutorial` (`Serial`, `Title`, `Author`) VALUES
(5, 'Hashing', 'rafat'),
(6, 'Binary Search', 'Salman'),
(7, 'DP', 'tipu'),
(8, 'Number Theory', 'Salman'),
(9, 'BFS', 'rafat'),
(10, 'DFS', 'foysol'),
(11, 'Sorting', 'pranta');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_sys`
--

CREATE TABLE `tbl_sys` (
  `Name` varchar(30) NOT NULL,
  `Uni_name` varchar(50) NOT NULL,
  `Email` varchar(30) NOT NULL,
  `Username` varchar(50) NOT NULL,
  `Password` varchar(20) NOT NULL,
  `Role` varchar(30) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_sys`
--

INSERT INTO `tbl_sys` (`Name`, `Uni_name`, `Email`, `Username`, `Password`, `Role`) VALUES
('Abdullah Siddiky', 'North East University', 'abdullah@yahoo.com', 'abdullah', '123456', 'User'),
('Abu Salek Khan', 'Metropolitan University', 'abu@gmail.com', 'abu', '123456', 'User'),
('Emrul Chowdhury', 'Metropolitan University', 'emrul.cse@metrouni.edu.bd', 'admin', '102030', 'Admin'),
('Emad Uddin', 'Metropolitan University', 'emad@yahoo.com', 'emad', '123456', 'User'),
('Emrul Chowdhury', 'Metropolitan University', 'emrul.chy@gmail.com', 'emrul', '102030', 'Admin'),
('Foysol Ahmed Shuvo', 'Metropolitan University', 'foysolahmed@gmail.com', 'foysol', '123456', 'User'),
('Partha Sarathi', 'City University', 'partha@yahoo.com', 'partha', '123456', 'User'),
('Avishek Das', 'BUTEX', 'pranta@gmail.com', 'pranta', '123456', 'User'),
('Islam Rafat', 'Metropolitan University', 'rafatislamsyl@gmail.com', 'rafat', '123456', 'User'),
('Shahriai Rukon', 'North South University', 'rukon@yahoo.com', 'rukon', '123456', 'User'),
('Abdul Halim Chowdhury', 'Metropolitan University', 'salman@gmail.com', 'salman', '123456', 'User'),
('Sourv Mohiuddin', 'Metropolitan University', 'sourov@yahoo.com', 'sourov', '123456', 'User'),
('Majharul Islam Khan', 'North East University', 'tipu@hotmail.com', 'tipu', '123456', 'User');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_tutorial`
--

CREATE TABLE `tbl_tutorial` (
  `Serial` int(11) NOT NULL,
  `Title` varchar(200) NOT NULL,
  `Body` longtext NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_tutorial`
--

INSERT INTO `tbl_tutorial` (`Serial`, `Title`, `Body`) VALUES
(1, 'Hello World', 'You will learn to write a “Hello, World!” program in this section.\n\n*** Why “Hello, World!” program?\n\n“Hello, World!” is a simple program that displays “Hello, World!” on the screen. Since, it’s a very \nsimple program, it is used to illustrate the basic syntax of any programming language.\n\nThis program is often used to introduce programming language to a beginner. So, let’s get started.\n\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n\n\n\n*** How “Hello, World!” program works?\n\nInclude stdio.h header file in your program.\n\nC programming is small and cannot do much by itself. You need to use libraries that are necessary \nto run the program. The stdio.h is a header file and C compiler knows the location of that file. To \nuse the file, you need to include it in your program using #include preprocessor.\n\nWhy do you need stdio.h file in this program?\n\nIn this program, we have used printf() function which displays the text inside the quotation mark. \nSince printf() is defined in stdio.h, you need to include stdio.h.\n\n\n\n*** The main() function\n\nIn C programming, the code execution begins from the start of main() function (doesn’t matter if \nmain() isn’t located at the beginning).\n\nThe code inside the curly braces { } is the body of main() function. The main() function is \nmandatory in every C program.\n\nint main() {\n}\nThis program doesn’t do anything but, it’s a valid C program.\n\n\n\n*** The printf() function\n\nThe printf() is a library function that sends formatted output to the screen (displays the string \ninside the quotation mark). Notice the semicolon at the end of the statement.\n\nIn our program, it displays Hello, World! on the screen.\n\nRemember, you need to include stdio.h file in your program for this to work.\n\n\n\n*** The return statement\n\nThe return statement return 0; inside the main() function ends the program. This statement isn’t \nmandatory. However, it’s considered good programming practice to use it.\n\n\n\n*** Key notes to take away\n-- All C program starts from the main() function and it’s mandatory.\n-- You can use the required header file that’s necessary in the program. For example: To use sqrt() \nfunction to calculate square root and pow() function to find power of a number, you need to include \nmath.h header file in your program.\n-- C is case-sensitive; the use of uppercase letter and lowercase letter have different meanings.\n-- The C program ends when the program encounters the return statement inside the main() function. \nHowever, return statement inside the main function is not mandatory.\n-- The statement in a C program ends with a semicolon.'),
(8, 'Keywords and Identifiers', '*** Character set\nCharacter set is a set of alphabets, letters and some special characters that are valid in C \nlanguage.\n\n\n*** Alphabets\nUppercase: A B C ................................... X Y Z\nLowercase: a b c ...................................... x y z\nC accepts both lowercase and uppercase alphabets as variables and functions.\n\n\n*** Digits\n0 1 2 3 4 5 6 7 8 9\n\n\n*** Special Characters\nSpecial Characters in C Programming\n,	<	>	.	_\n(	)	;	$	:\n%	[	]	#	?\n\'	&	{	}	\"\n^	!	*	/	|\n-	\\	~	+	 \n\n\n*** White space Characters\nblank space, new line, horizontal tab, carriage return and form feed\n\n\n*** C Keywords\nKeywords are predefined, reserved words used in programming that have special meanings to the \ncompiler. Keywords are part of the syntax and they cannot be used as an identifier. For example:\nint money;\n\nHere, int is a keyword that indicates \'money\' is a variable of type integer. \n\nAs C is a case sensitive language, all keywords must be written in lowercase. Here is a list of all \nkeywords allowed in ANSI C.\n\n\n*** Keywords in C Language\nauto	double	int	struct\nbreak	else	long	switch\ncase	enum	register 	typedef\nchar	extern	return	union\ncontinue	for	signed	void\ndo	if	static 	while\ndefault	goto	sizeof	volatile\nconst	float	short	unsigned\nAlong with these keywords, C supports other numerous keywords depending upon the compiler.\n\nAll these keywords, their syntax and application will be discussed in their respective topics. \nHowever, if you want a brief overview on these keywords without going further, visit list of all \nkeywords in C programming.\n\n\n*** C Identifiers\nIdentifier refers to name given to entities such as variables, functions, structures etc.\n\n\nIdentifier must be unique. They are created to give unique name to a entity to identify it during \nthe execution of the program. For example: int money;\ndouble accountBalance;\nHere, money and accountBalance are identifiers.\n\nAlso remember, identifier names must be different from keywords. You cannot use int as an \nidentifier because int is a keyword.\n\n*** Rules for writing an identifier\nA valid identifier can have letters (both uppercase and lowercase letters), digits and underscores.\nThe first letter of an identifier should be either a letter or an underscore. However, it is \ndiscouraged to start an identifier name with an underscore.\nThere is no rule on length of an identifier. However, the first 31 characters of identifiers are \ndiscriminated by the compiler.\n\n\n*** Good Programming Practice\nYou can choose any name for an identifier (excluding keywords). However, if you give meaningful \nname to an identifier, it will be easy to understand and work on for you and your fellow \nprogrammers.\n\n'),
(9, 'Constants and Variables', '*** Variables\nIn programming, a variable is a container (storage area) to hold data.\n\nTo indicate the storage area, each variable should be given a unique name (identifier). Variable \nnames are just the symbolic representation of a memory location. For example:\n\nint playerScore = 95;\nHere, playerScore is a variable of integer type. The variable is assigned value: 95.\n\nThe value of a variable can be changed, hence the name \'variable\'.\n\nIn C programming, you have to declare a variable before you can use it.\n\n\n*** Rules for naming a variable in C\nA variable name can have letters (both uppercase and lowercase letters), digits and underscore only.\nThe first letter of a variable should be either a letter or an underscore. However, it is \ndiscouraged to start variable name with an underscore. It is because variable name that starts with \nan underscore can conflict with system name and may cause error.\nThere is no rule on how long a variable can be. However, only the first 31 characters of a variable \nare checked by the compiler. So, the first 31 letters of two variables in a program should be \ndifferent.\nC is a strongly typed language. What this means it that, the type of a variable cannot be changed.\n\nVisit this page to learn more about different types of data a variable can store.\n\n\n*** Constants/Literals\nA constant is a value or an identifier whose value cannot be altered in a program. For example: 1, \n2.5, \"C programming is easy\", etc.\n\nAs mentioned, an identifier also can be defined as a constant.\n\nconst double PI = 3.14\nHere, PI is a constant. Basically what it means is that, PI and 3.14 is same for this program.\n\nBelow are the different types of constants you can use in C.\n\n\n# 1. Integer constants\nAn integer constant is a numeric constant (associated with number) without any fractional or \nexponential part. There are three types of integer constants in C programming:\n\ndecimal constant(base 10)\noctal constant(base 8)\nhexadecimal constant(base 16)\nFor example:\n\nDecimal constants: 0, -9, 22 etc\nOctal constants: 021, 077, 033 etc\nHexadecimal constants: 0x7f, 0x2a, 0x521 etc\nIn C programming, octal constant starts with a 0 and hexadecimal constant starts with a 0x.\n\n\n# 2. Floating-point constants\nA floating point constant is a numeric constant that has either a fractional form or an exponent \nform. For example:\n\n-2.0\n0.0000234\n-0.22E-5\nNote: E-5 = 10-5\n\n\n# 3. Character constants\nA character constant is a constant which uses single quotation around characters. For example: \'a\', \n\'l\', \'m\', \'F\'\n\n# 4. Escape Sequences\nSometimes, it is necessary to use characters which cannot be typed or has special meaning in C \nprogramming. For example: newline(enter), tab, question mark etc. In order to use these characters, \nescape sequence is used.\n\nFor example: \\n is used for newline. The backslash ( \\ ) causes \"escape\" from the normal way the \ncharacters are interpreted by the compiler.\n\nEscape Sequences\nEscape Sequences	Character\n\\b	Backspace\n\\f	Form feed\n\\n	Newline\n\\r	Return\n\\t	Horizontal tab\n\\v	Vertical tab\n\\\\	Backslash\n\\\'	Single quotation mark\n\\\"	Double quotation mark\n\\?	Question mark\n\\0	Null character\n\n\n# 5. String constants\nString constants are the constants which are enclosed in a pair of double-quote marks. For example:\n\n\"good\"                  //string constant\n\"\"                     //null string constant\n\"      \"               //string constant of six white space\n\"x\"                    //string constant having single character.\n\"Earth is round\\n\"         //prints string with newline\n\n\n# 6. Enumeration constants\nKeyword enum is used to define enumeration types. For example:\n\nenum color {yellow, green, black, white};\nHere, color is a variable and yellow, green, black and white are the enumeration constants having \nvalue 0, 1, 2 and 3 respectively. For more information, visit page: C Enumeration.'),
(10, 'Data types in C', 'In this tutorial, you will learn about data types and how to declare a variable in C programming.\nC Programming Data Types\n\nIn C programming, variables or memory locations should be declared before it can be used. \nSimilarly, a function also needs to be declared before use.\n\nData types simply refers to the type and size of data associated with variables and functions.\n\n*** Data types in C\nInteger types\nFloating type\nCharacter type\n\nThis tutorial will focus on fundamental data types. To learn about derived data types, visit the \ncorresponding tutorial.\n\n\n### int - Integer data types\nIntegers are whole numbers that can have both positive and negative values but no decimal values. \nExample: 0, -5, 10\n\nIn C programming, keyword int is used for declaring integer variable. For example:\n\nint id;\nHere, id is a variable of type integer.\n\nYou can declare multiple variable at once in C programming. For example:\n\nint id, age;\nThe size of int is either 2 bytes(In older PC\'s) or 4 bytes. If you consider an integer having size \nof 4 byte( equal to 32 bits), it can take 232 distinct states as: -231,-231+1, ...,-2, -1, 0, 1, 2, \n..., 231-2, 231-1. If you try to store larger number than 231-1, i.e,+2147483647 and smaller number \nthan -231, i.e, -2147483648, program will not run correctly.\n\nSimilarly, int of 2 bytes, it can take 216 distinct states from -215 to 215-1.\n\n\n### float - Floating types\nFloating type variables can hold real numbers such as: 2.34, -9.382, 5.0 etc. You can declare a \nfloating point variable in C by using either float or double keyword. For example:\n\nfloat accountBalance;\ndouble bookPrice;\nHere, both accountBalance and bookPrice are floating type variables.\n\nIn C, floating values can be represented in exponential form as well. For example:\n\nfloat normalizationFactor = 22.442e2;\nDifference between float and double\nThe size of float (single precision float data type) is 4 bytes. And the size of double (double \nprecision float data type) is 8 bytes. Floating point variables has a precision of 6 digits whereas \nthe precision of double is 14 digits.\n\n\n### char - Character types\nKeyword char is used for declaring character type variables. For example:\n\nchar test = \'h\';\nHere, test is a character variable. The value of test is \'h\'.\n\nThe size of character variable is 1 byte.\n\n\n### C Qualifiers\nQualifiers alters the meaning of base data types to yield a new data type.\n\n\n### Size qualifiers\nSize qualifiers alters the size of a basic type. There are two size qualifiers, long and short. For \nexample:\n\nlong double i;\nThe size of double is 8 bytes. However, when long keyword is used, that variable becomes 10 bytes.\n\nLearn more about long keyword in C programming.\n\nThere is another keyword short which can be used if you previously know the value of a variable \nwill always be a small number.\n\n\n### Sign qualifiers\nIntegers and floating point variables can hold both negative and positive values. However, if a \nvariable needs to hold positive value only, unsigned data types are used. For example:\n\n// unsigned variables cannot hold negative value \nunsigned int positiveInteger;\nThere is another qualifier signed which can hold both negative and positive only. However, it is \nnot necessary to define variable signed since a variable is signed by default.\n\nAn integer variable of 4 bytes can hold data from -231 to 231-1. However, if the variable is \ndefined as unsigned, it can hold data from 0 to 232-1.\n\nIt is important to note that, sign qualifiers can be applied to int and char types only.\n\n\n### Constant qualifiers\nAn identifier can be declared as a constant. To do so const keyword is used.\n\nconst int cost = 20;\nThe value of cost cannot be changed in the program.'),
(11, 'C Input Output (I/O)', 'C programming has several in-built library functions to perform input and output tasks.\n\nTwo commonly used functions for I/O (Input/Output) are printf() and scanf().\n\nThe scanf() function reads formatted input from standard input (keyboard) whereas the printf() \nfunction sends formatted output to the standard output (screen).\n\n\nExample #1: C Output\n\n#include <stdio.h>      //This is needed to run printf() function.\nint main()\n{\n    printf(\"C Programming\");  //displays the content inside quotation\n    return 0;\n}\n\n# Output\n\nC Programming\n\n\n*** How this program works?\n\nAll valid C program must contain the main() function. The code execution begins from the start of \nmain() function.\nThe printf() is a library function to send formatted output to the screen. The printf() function is \ndeclared in \"stdio.h\" header file.\nHere, stdio.h is a header file (standard input output header file) and #include is a preprocessor \ndirective to paste the code from the header file when necessary. When the compiler encounters \nprintf() function and doesn\'t find stdio.h header file, compiler shows error.\nThe return 0; statement is the \"Exit status\" of the program. In simple terms, program ends.\n\n\nExample #2: C Integer Output\n\n#include <stdio.h>\nint main()\n{\n    int testInteger = 5;\n    printf(\"Number = %d\", testInteger);\n    return 0;\n}\n\n# Output\n\nNumber = 5\n\nInside the quotation of printf() function, there is a format string \"%d\" (for integer). If the \nformat string matches the argument (testInteger in this case), it is displayed on the screen.\n\n\nExample #3: C Integer Input/Output\n#include <stdio.h>\nint main()\n{\n    int testInteger;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&testInteger);  \n    printf(\"Number = %d\",testInteger);\n    return 0;\n}\n\n# Output\n\nEnter an integer: 4\nNumber = 4\n\nThe scanf() function reads formatted input from the keyboard. When user enters an integer, it is \nstored in variable testInteger.\n\nNote the \'&\' sign before testInteger; &testInteger gets the address of testInteger and the value is \nstored in that address.\n\n\nExample #3: C Floats Input/Output\n#include <stdio.h>\nint main()\n{\n    float f;\n    printf(\"Enter a number: \");\n// %f format string is used in case of floats\n    scanf(\"%f\",&f);\n    printf(\"Value = %f\", f);\n    return 0;\n}\n\n# Output\n\nEnter a number: 23.45\nValue = 23.450000\n\nThe format string \"%f\" is used to read and display formatted in case of floats.\n\n\nExample #4: C Character I/O\n#include <stdio.h>\nint main()\n{\n    char chr;\n    printf(\"Enter a character: \");\n    scanf(\"%c\",&chr);     \n    printf(\"You entered %c.\",chr);  \n    return 0;\n}   \n\n# Output\n\nEnter a character: g\nYou entered g.\n\nFormat string %c is used in case of character types.\n\nLittle bit on ASCII code\nWhen a character is entered in the above program, the character itself is not stored. Instead, a \nnumeric value(ASCII value) is stored.\n\nAnd when we displayed that value using \"%c\" text format, the entered character is displayed.\n\n\nExample #5: C ASCII Code\n#include <stdio.h>\nint main()\n{\n    char chr;\n    printf(\"Enter a character: \");\n    scanf(\"%c\",&chr);     \n\n    // When %c text format is used, character is displayed in case of character types\n    printf(\"You entered %c.\\n\",chr);  \n\n    // When %d text format is used, integer is displayed in case of character types\n    printf(\"ASCII value of %c is %d.\", chr, chr);  \n    return 0;\n}\n\n# Output\n\nEnter a character: g\nYou entered g.\nASCII value of g is 103.\n\nThe ASCII value of character \'g\' is 103. When, \'g\' is entered, 103 is stored in variable var1 \ninstead of g. \nYou can display a character if you know ASCII code of that character. This is shown by following \nexample.\n\n\nExample #6: C ASCII Code\n#include <stdio.h>\nint main()\n{\n    int chr = 69;\n    printf(\"Character having ASCII value 69 is %c.\",chr);\n    return 0;\n}  \n\n# Output\n\nCharacter having ASCII value 69 is E.\n\nMore on Input/Output of floats and Integers\nInteger and floats can be displayed in different formats in C programming.\n\n\nExample #7: I/O of Floats and Integers\n#include <stdio.h>\nint main()\n{\n\n    int integer = 9876;\n    float decimal = 987.6543;\n\n    //  Prints the number right justified within 6 columns\n    printf(\"4 digit integer right justified to 6 column: %6d\\n\", integer);\n\n    // Tries to print number right justified to 3 digits but the number is not right adjusted \nbecause there are only 4 numbers\n    printf(\"4 digit integer right justified to 3 column: %3d\\n\", integer);\n\n    // Rounds to two digit places\n    printf(\"Floating point number rounded to 2 digits: %.2f\\n\",decimal);\n\n    // Rounds to 0 digit places\n    printf(\"Floating point number rounded to 0 digits: %.f\\n\",987.6543);\n\n    // Prints the number in exponential notation(scientific notation)\n    printf(\"Floating point number in exponential form: %e\\n\",987.6543);\n    return 0;\n}   \n\n# Output\n\n4 digit integer right justified to 6 column:   9876\n4 digit integer right justified to 3 column: 9876\nFloating point number rounded to 2 digits: 987.65\nFloating point number rounded to 0 digits: 988\nFloating point number in exponential form: 9.876543e+02  \n'),
(12, 'C Programming Operators', 'C programming has various operators to perform tasks including arithmetic, conditional and bitwise \noperations. You will learn about various C operators and how to use them in this tutorial.\nAn operator is a symbol which operates on a value or a variable. For example: + is an operator to \nperform addition.\n\nC programming has wide range of operators to perform various operations. For better understanding \nof operators, these operators can be classified as:\n\n\n*** Operators in C programming\n- Arithmetic Operators\n- Increment and Decrement Operators\n- Assignment Operators\n- Relational Operators\n- Logical Operators\n- Conditional Operators\n- Bitwise Operators\n- Special Operators\n- C Arithmetic Operators\n\nAn arithmetic operator performs mathematical operations such as addition, subtraction and \nmultiplication on numerical values (constants and variables).\n\nOperator	Meaning of Operator\n+	addition or unary plus\n-	subtraction or unary minus\n*	multiplication\n/	division\n%	remainder after division( modulo division)\n\n\n*** C Assignment Operators\nAn assignment operator is used for assigning a value to a variable. The most common assignment \noperator is =\n\nOperator	Example	Same as\n=	a = b	a = b\n+=	a += b	a = a+b\n-=	a -= b	a = a-b\n*=	a *= b	a = a*b\n/=	a /= b	a = a/b\n%=	a %= b	a = a%b\n\nRelational operators are used in decision making and loops.\n\nOperator	Meaning of Operator	Example\n==	Equal to	5 == 3 returns 0\n>	Greater than	5 > 3 returns 1\n<	Less than	5 < 3 returns 0\n!=	Not equal to	5 != 3 returns 1\n>=	Greater than or equal to	5 >= 3 returns 1\n<=	Less than or equal to	5 <= 3 return 0\n\n\n*** C Logical Operators\nAn expression containing logical operator returns either 0 or 1 depending upon whether expression \nresults true or false. Logical operators are commonly used in decision making in C programming.\n\nOperator	Meaning of Operator	Example\n&&	Logial AND. True only if all operands are true 	If c = 5 and d = 2 then, expression ((c == 5) && \n(d > 5)) equals to 0.\n||	Logical OR. True only if either one operand is true	If c = 5 and d = 2 then, expression ((c == \n5) || (d > 5)) equals to 1.\n!	Logical NOT. True only if the operand is 0	If c = 5 then, expression ! (c == 5) equals to 0.\n\n\n*** Bitwise Operators\nDuring computation, mathematical operations like: addition, subtraction, addition and division are \nconverted to bit-level which makes processing faster and saves power.\n\nBitwise operators are used in C programming to perform bit-level operations.\n\nOperators	Meaning of operators\n&	Bitwise AND\n|	Bitwise OR\n^	Bitwise exclusive OR\n~	Bitwise complement\n<<	Shift left\n>>	Shift right\nVisit bitwise operator in C to learn more.\n\n\n*** Other Operators\n** Comma Operator\nComma operators are used to link related expressions together. For example:\n\nint a, c = 5, d;\nThe sizeof operator\nThe sizeof is an unary operator which returns the size of data (constant, variables, array, \nstructure etc).'),
(13, 'C if/else Statement', 'In programming, decision making is used to specify the order in which statements are executed. In \nthis tutorial, you will learn to create decision making program using if...else statements.\nWorking of if else statement in C programming\n\n*** C if statement\nif (testExpression) \n{\n  // statements\n}\n\nThe if statement evaluates the test expression inside the parenthesis.\nIf the test expression is evaluated to true (nonzero), statements inside the body of if is executed.\nIf the test expression is evaluated to false (0), statements inside the body of if is skipped from \nexecution.\n\nTo learn more on when test expression is evaluated to nonzero (true) and 0 (false), check out \nrelational and logical operators.\n\n\n** C if...else statement\nThe if...else statement executes some code if the test expression is true (nonzero) and some other c\node if the test expression is false (0).\n\n** Syntax of if...else\n\nif (testExpression) {\n   // codes inside the body of if\n}\nelse {\n   // codes inside the body of else\n}\n\nIf test expression is true, codes inside the body of if statement is executed and, codes inside the \nbody of else statement is skipped.\n\nIf test expression is false, codes inside the body of else statement is executed and, codes inside t\nhe body of if statement is skipped.\n\n\n*** Nested if...else statement (if...elseif....else Statement)\nThe if...else statement executes two different codes depending upon whether the test expression is t\nrue or false. Sometimes, a choice has to be made from more than 2 possibilities.\nThe nested if...else statement allows you to check for multiple test expressions and execute differe\nnt codes for more than two conditions.\n\n** Syntax of nested if...else statement.\nif (testExpression1) \n{\n  // statements to be executed if testExpression1 is true\n}\nelse if(testExpression2) \n{\n  // statements to be executed if testExpression1 is false and testExpression2 is true\n}\nelse if (testExpression 3) \n{\n  // statements to be executed if testExpression1 and testExpression2 is false and testExpression3 \nis true\n}\n.\n.\nelse \n{\n  // statements to be executed if all test expressions are false\n}'),
(14, 'C For Loop', 'Loops are used in programming to repeat a specific block until some end condition is met. There are \nthree loops in C programming:\n\n- for loop\n- while loop\n- do...while loop\n\n\n** for Loop\n\nThe syntax of for loop is:\n\nfor (initializationStatement; testExpression; updateStatement)\n{\n      // codes \n}\n\n** How for loop works?\n\nThe initialization statement is executed only once.\nThen, the test expression is evaluated. If the test expression is false (0), for loop is terminated.\nBut if the test expression is true (nonzero), codes inside the body of for loop is executed and the\nupdate expression is updated.\nThis process repeats until the test expression is false.\nThe for loop is commonly used when the number of iterations is known.\nTo learn more on test expression (when test expression is evaluated to nonzero (true) and 0 (false)),\ncheck out relational and logical operators.\n\n** Example: for loop\n// Program to calculate the sum of first n natural numbers\n// Positive integers 1,2,3...n are known as natural numbers\n#include <stdio.h>\nint main()\n{\n   int num, count, sum = 0;\n   printf(\"Enter a positive integer: \");\n   scanf(\"%d\", &num);\n   // for loop terminates when n is less than count\n   for(count = 1; count <= num; ++count)\n   {\n       sum += count;\n   }\n   printf(\"Sum = %d\", sum);\n   return 0;\n}\n\nOutput:\n\nEnter a positive integer: 10\nSum = 55\n\nThe value entered by the user is stored in variable num. Suppose, the user entered 10.\nThe count is initialized to 1 and the test expression is evaluated. Since, the test expression count\n<= num (1 less than or equal to 10) is true, the body of for loop is executed and the value of sum \nwill equal to 1.\n\nThen, the update statement ++count is executed and count will equal to 2. Again, the test expression\nis evaluated. Since, 2 is also less than 10, the test expression is evaluated to true and the body \nof for loop is executed. Now, the sum will equal 3.\n\nThis process goes on and the sum is calculated until the count reaches 11.\nWhen the count is 11,  the test expression is evaluated to 0 (false) as 11 is not less than or equal\nto 10. Therefore, the loop terminates and next, the total sum is printed.'),
(15, 'C While & Do While Loop', '** while loop\n\nThe syntax of a while loop is:\nwhile (testExpression) \n{\n   //codes \n}\n\nwhere, testExpression checks the condition is true or false before each loop.\n\n** How while loop works?\nThe while loop evaluates the test expression.\nIf the test expression is true (nonzero), codes inside the body of while loop are exectued. The test\nexpression is evaluated again. The process goes on until the test expression is false.\nWhen the test expression is false, the while loop is terminated.\n\nExample #1: while loop\n// Program to find factorial of a number\n// For a positive integer n, factorial = 1*2*3...n\n#include <stdio.h>\nint main()\n{\n   int number;\n   long long factorial;\n   printf(\"Enter an integer: \");\n   scanf(\"%d\",&number);\n   factorial = 1;\n   // loop terminates when number is less than or equal to 0\n   while (number > 0)\n   {\n       factorial *= number;  // factorial = factorial*number;\n       --number;\n   }\n   printf(\"Factorial= %lld\", factorial);\n   return 0;\n}\n\nOutput:\n\nEnter an integer: 5\nFactorial = 120\nTo learn more on test expression (when test expression is evaluated to nonzero (true) and 0 (false))\n, check out relational and logical operators.\n\n\n** do...while loop\nThe do..while loop is similar to the while loop with one important difference. The body of do...whil\ne loop is executed once, before checking the test expression. Hence, the do...while loop is executed\nat least once.\n\n** do...while loop Syntax\ndo\n{\n  // codes\n}\nwhile (testExpression);\n\n** How do...while loop works?\nThe code block (loop body) inside the braces is executed once.\nThen, the test expression is evaluated. If the test expression is true, the loop body is executed ag\nain. This process goes on until the test expression is evaluated to 0 (false).\nWhen the test expression is false (nonzero), the do...while loop is terminated.\n\nExample #2: do...while loop\n// Program to add numbers until user enters zero\n#include <stdio.h>\nint main()\n{\n   double number, sum = 0;\n   // loop body is executed at least once\n   do\n   {\n       printf(\"Enter a number: \");\n       scanf(\"%lf\", &number);\n       sum += number;\n   }\n   while(number != 0.0);\n   printf(\"Sum = %.2lf\",sum);\n   return 0;\n}\n\nOutput:\n\nEnter a number: 1.5\nEnter a number: 2.4\nEnter a number: -3.4\nEnter a number: 4.2\nEnter a number: 0\nSum = 4.70\nTo learn more on test expression (when test expression is evaluated to nonzero (true) and 0 (false))\n, check out relational and logical operators.\nCheck Whether a Character is Vowel or Consonant\nCalculate the Sum of Natural Numbers\nDisplay Fibonacci Sequence'),
(16, 'C break and continue Statement', 'In this tutorial, you will learn how to use break and continue statements to alter the program flow of loops.\nbreak and continue statement in Programming\nIt is sometimes desirable to skip some statements inside the loop or terminate the loop immediately without checking the test expression.\n\nIn such cases, break and continue statements are used.\n\n\n** break Statement\nThe break statement terminates the loop (for, while and do...while loop) immediately when it is encountered. The break statement is used with decision making statement such as if...else.\n\nSyntax of break statement\nbreak;\nThe simple code above is the syntax for break statement.\n\n\n** How break statement works?\nWorking of break statement\n\nExample #1: break statement\n\n# include <stdio.h>\nint main()\n{\n    int i;\n    double number, sum = 0.0;\n\n    for(i=1; i <= 10; ++i)\n    {\n        printf(\"Enter a n%d: \",i);\n        scanf(\"%lf\",&number);\n\n        // If user enters negative number, loop is terminated\n        if(number < 0.0)\n        {\n            break;\n        }\n\n        sum += number; // sum = sum + number;\n    }\n\n    printf(\"Sum = %.2lf\",sum);\n    \n    return 0;\n}\n\nOutput:\n\nEnter a n1: 2.4\nEnter a n2: 4.5\nEnter a n3: 3.4\nEnter a n4: -3\nSum = 10.30\n\nThis program calculates the sum of maximum of 10 numbers. It\'s because, when the user enters negative number, the break statement is executed and loop is terminated.\n\nIn C programming, break statement is also used with switch...case statement.\n\n\n** continue Statement\nThe continue statement skips some statements inside the loop. The continue statement is used with decision making statement such as if...else.\n\n** Syntax of continue Statement\ncontinue;\n\n** How continue statement works?\nWorking of continue statement in C programming\n\nExample #2: continue statement\n\n# include <stdio.h>\nint main()\n{\n    int i;\n    double number, sum = 0.0;\n\n    for(i=1; i <= 10; ++i)\n    {\n        printf(\"Enter a n%d: \",i);\n        scanf(\"%lf\",&number);\n\n        // If user enters negative number, loop is terminated\n        if(number < 0.0)\n        {\n            continue;\n        }\n\n        sum += number; // sum = sum + number;\n    }\n\n    printf(\"Sum = %.2lf\",sum);\n    \n    return 0;\n}\n\nOutput:\n\nEnter a n1: 1.1\nEnter a n2: 2.2\nEnter a n3: 5.5\nEnter a n4: 4.4\nEnter a n5: -3.4\nEnter a n6: -45.5\nEnter a n7: 34.5\nEnter a n8: -4.2\nEnter a n9: -1000\nEnter a n10: 12\nSum = 59.70\n\nIn the program, when the user enters positive number, the sum is calculated using sum += number; statement.\n\nWhen the user enters negative number, the continue statement is executed and skips the negative number from calculation.'),
(17, 'C switch case Statement', 'In this tutorial, you will learn to write a switch statement in C programming (with an example).\n\n** Switch case in C Programming\nThe if..else..if ladder allows you to execute a block code among many alternatives. If you are check\ning on the value of a single variable in if...else...if, it is better to use switch statement.\nThe switch statement is often faster than nested if...else (not always). Also, the syntax of switch \nstatement is cleaner and easy to understand.\n\n** Syntax of switch...case\nswitch (n)\n?{\n   case constant1:\n       // code to be executed if n is equal to constant1;\n       break;\n   case constant2:\n       // code to be executed if n is equal to constant2;\n       break;\n       .\n       .\n       .\n   default:\n       // code to be executed if n doesn\'t match any constant\n}\n\nWhen a case constant is found that matches the switch expression, control of the program passes to t\nhe block of code associated with that case.\n\nIn the above pseudocode, suppose the value of n is equal to constant2. The compiler will execute the\nblock of code associate with the case statement until the end of switch block, or until the break s\ntatement is encountered.\n\nThe break statement is used to prevent the code running into the next case.\n\nExample: switch Statement\n# include <stdio.h>\nint main() {\n   char operator;\n   double firstNumber,secondNumber;\n   printf(\"Enter an operator (+, -, *, /): \");\n   scanf(\"%c\", &operator);\n   printf(\"Enter two operands: \");\n   scanf(\"%lf %lf\",&firstNumber, &secondNumber);\n   switch(operator)\n   {\n       case \'+\':\n           printf(\"%.1lf + %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber+secondNumber);\n           break;\n       case \'-\':\n           printf(\"%.1lf - %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber-secondNumber);\n           break;\n       case \'*\':\n           printf(\"%.1lf * %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber*secondNumber);\n           break;\n       case \'/\':\n           printf(\"%.1lf / %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber/firstNumber);\n           break;\n       // operator is doesn\'t match any case constant (+, -, *, /)\n       default:\n           printf(\"Error! operator is not correct\");\n   }\n   return 0;\n}\n\nOutput:\nEnter an operator (+, -, *,): -\nEnter two operands: 32.5\n12.4\n32.5 - 12.4 = 20.1\n\nThe - operator entered by the user is stored in operator variable. And, two operands 32.5 and 12.4 a\nre stored in variables firstNumber and secondNumber respectively.\n\nThen, control of the program jumps to\nprintf(\"%.1lf / %.1lf = %.1lf\",firstNumber, secondNumber, firstNumber/firstNumber);\n\nFinally, the break statement ends the switch statement.\nIf break statement is not used, all cases after the correct case is executed. '),
(18, 'C Programming Functions', 'In this tutorial, you will be introduced to functions (both user-defined and standard library functions) in C programming. Also, you will learn why functions are used in programming.\nFunctions in C programming\nA function is a block of code that performs a specific task.\n\nSuppose, a program related to graphics needs to create a circle and color it depending upon the radius and color from the user. You can create two functions to solve this problem:\n\n-- create a circle function\n-- color function\n\nDividing complex problem into small components makes program easy to understand and use.\n\n\n** Types of functions in C programming\nDepending on whether a function is defined by the user or already included in C compilers, there are two types of functions in C programming\n\nThere are two types of functions in C programming:\n\n-- Standard library functions\n--User defined functions\n\n\n** Standard library functions\nThe standard library functions are built-in functions in C programming to handle tasks such as mathematical computations, I/O processing, string handling etc.\n\nThese functions are defined in the header file. When you include the header file, these functions are available for use. For example:\n\nThe printf() is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in \"stdio.h\" header file.\n\nThere are other numerous library functions defined under \"stdio.h\", such as scanf(), fprintf(), getchar() etc. Once you include \"stdio.h\" in your program, all these functions are available for use.\n\nVisit this page to learn more about standard library functions in C programming.\n\n\n*** User-defined functions\nAs mentioned earlier, C allow programmers to define functions. Such functions created by the user are called user-defined functions.\n\nDepending upon the complexity and requirement of the program, you can create as many user-defined functions as you want.\n\n\n** How user-defined function works?\n\n#include <stdio.h>\nvoid functionName()\n{\n    ... .. ...\n    ... .. ...\n}\n\nint main()\n{\n    ... .. ...\n    ... .. ...\n\n    functionName();\n    \n    ... .. ...\n    ... .. ...\n}\n\nThe execution of a C program begins from the main() function.\n\nWhen the compiler encounters functionName(); inside the main function, control of the program jumps to\n\n void functionName()\nAnd, the compiler starts executing the codes inside the user-defined function.\n\nThe control of the program jumps to statement next to functionName(); once all the codes inside the function definition are executed.\n\nHow function works in C programming?\n\nRemember, function name is an identifier and should be unique.\n\nThis is just an overview on user-defined function. Visit these pages to learn more on:\n\n-- User-defined Function in C programming\n-- Types of user-defined Functions\n\n\n** Advantages of user-defined function\n-- The program will be easier to understand, maintain and debug.\n-- Reusable codes that can be used in other programs\n-- A large program can be divided into smaller modules. Hence, a large project can be divided among many programmers.\n'),
(19, 'C User-defined functions', 'You will learn to create user-defined functions in C programming in this article.\nC Programming user-defined functions\nA function is a block of code that performs a specific task.\n\nC allows you to define functions according to your need. These functions are known as user-defined functions. For example:\n\nSuppose, you need to create a circle and color it depending upon the radius and color. You can create two functions to solve this problem:\n\n-- createCircle() function\n-- color() function\n\nExample: User-defined function\n\n#include <stdio.h>\n\nint addNumbers(int a, int b);         // function prototype\n\nint main()\n{\n    int n1,n2,sum;\n\n    printf(\"Enters two numbers: \");\n    scanf(\"%d %d\",&n1,&n2);\n\n    sum = addNumbers(n1, n2);        // function call\n\n    printf(\"sum = %d\",sum);\n\n    return 0;\n}\n\nint addNumbers(int a,int b)         // function definition   \n{\n    int result;\n    result = a+b;\n    return result;                  // return statement\n}\n\n** Function prototype\nA function prototype is simply the declaration of a function that specifies function\'s name, parameters and return type. It doesn\'t contain function body.\n\nA function prototype gives information to the compiler that the function may later be used in the program.\n\n\n** Syntax of function prototype\nreturnType functionName(type1 argument1, type2 argument2,...);\nIn the above example, int addNumbers(int a, int b); is the function prototype which provides following information to the compiler:\n\nname of the function is addNumbers()\nreturn type of the function is int\ntwo arguments of type int are passed to the function\nThe function prototype is not needed if the user-defined function is defined before the main() function.\n\n\n** Calling a function\nControl of the program is transferred to the user-defined function by calling it.\n\n\n** Syntax of function call\nfunctionName(argument1, argument2, ...);\nIn the above example, function call is made using addNumbers(n1,n2); statement inside the main().\n\n\n** Function definition\nFunction definition contains the block of code to perform a specific task i.e. in this case, adding two numbers and returning it.\n\n\n** Syntax of function definition\nreturnType functionName(type1 argument1, type2 argument2, ...)\n{\n    //body of the function\n}\nWhen a function is called, the control of the program is transferred to the function definition. And, the compiler starts executing the codes inside the body of a function.\n\nPassing arguments to a function\nIn programming, argument refers to the variable passed to the function. In the above example, two variables n1 and n2 are passed during function call.\n\nThe parameters a and b accepts the passed arguments in the function definition. These arguments are called formal parameters of the function.\n\nPassing arguments to a function\n\nThe type of arguments passed to a function and the formal parameters must match, otherwise the compiler throws error.\n\nIf n1 is of char type, a also should be of char type. If n2 is of float type, variable b also should be of float type.\n\nA function can also be called without passing an argument.\n\n** Return Statement\nThe return statement terminates the execution of a function and returns a value to the calling function. The program control is transferred to the calling function after return statement.\n\nIn the above example, the value of variable result is returned to the variable sum in the main() function.\n\n\n** Syntax of return statement\nreturn (expression);     \nFor example,\n\nreturn a;\nreturn (a+b);\nThe type of value returned from the function and the return type specified in function prototype and function definition must match.');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `tbl_problem`
--
ALTER TABLE `tbl_problem`
  ADD PRIMARY KEY (`Serial`);

--
-- Indexes for table `tbl_request_problem`
--
ALTER TABLE `tbl_request_problem`
  ADD PRIMARY KEY (`Serial`);

--
-- Indexes for table `tbl_request_tutorial`
--
ALTER TABLE `tbl_request_tutorial`
  ADD PRIMARY KEY (`Serial`);

--
-- Indexes for table `tbl_sys`
--
ALTER TABLE `tbl_sys`
  ADD PRIMARY KEY (`Username`);

--
-- Indexes for table `tbl_tutorial`
--
ALTER TABLE `tbl_tutorial`
  ADD PRIMARY KEY (`Serial`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `tbl_problem`
--
ALTER TABLE `tbl_problem`
  MODIFY `Serial` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=62;

--
-- AUTO_INCREMENT for table `tbl_request_problem`
--
ALTER TABLE `tbl_request_problem`
  MODIFY `Serial` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `tbl_request_tutorial`
--
ALTER TABLE `tbl_request_tutorial`
  MODIFY `Serial` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `tbl_tutorial`
--
ALTER TABLE `tbl_tutorial`
  MODIFY `Serial` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
